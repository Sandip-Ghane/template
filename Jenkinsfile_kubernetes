/* Only keep the 10 most recent builds and config schedule 10m. */
def projectProperties = [
    [$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '10']],
	pipelineTriggers([pollSCM('*/10 * * * *')])
]

properties(projectProperties)

node {
  try {
    notifyBuild('STARTED')

    def target = env.SSH_USER + '@' + env.SSH_HOST

    stage('Clone Backend Golang Repository'){
		  checkout scm
	  }

    stage('Build Docker Image for Backend Golang') {      
      sh 'docker build --rm -t localhost:5000/backend-golang:latest .'
		}

    stage('Push Golang Backend Image to Docker Registry') {      
      sh 'docker push localhost:5000/backend-golang:latest'
		}
	
    stage('Deploy Golang Backend on Kubernetes cluster') {
      sshagent(credentials:['ssh-credential']) {        
        sh 'ssh -o StrictHostKeyChecking=no ' + target +' uname -a'
        sh 'scp -r ./kubernetes.yaml ' + target + ':/home/' + env.SSH_USER + '/kubernetes.yaml'
        sh 'ssh ' + target + ' kubectl apply -f ' + '/home/' + env.SSH_USER + '/kubernetes.yaml'
      }
	  }
  } catch (e) {
      currentBuild.result = "FAILED"
  } finally {
      notifyBuild(currentBuild.result)
  }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} <${env.BUILD_URL}|Job URL> - <${env.BUILD_URL}/console|Console Output>"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  // slackSend(color: colorCode, message: summary)
}