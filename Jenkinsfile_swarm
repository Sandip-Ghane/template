/* Only keep the 10 most recent builds and config schedule 10m. */
def projectProperties = [
    [$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '10']],
	pipelineTriggers([pollSCM('*/10 * * * *')])
]

properties(projectProperties)

node {
  try {
    notifyBuild('STARTED')

    stage('Clone Backend Golang Repository'){
		  checkout scm
	  }

    stage('Build Docker Image for Backend Golang') {      
      sh 'docker build --rm -t 127.0.0.1:5000/backend-golang:latest .'
		}

    stage('Push Golang Backend Image to Docker Registry') {      
      sh 'docker push 127.0.0.1:5000/backend-golang:latest'
		}
	
    stage('Deploy Golang Backend on Docker swarm cluster') {
      // sshagent(credentials:['ssh-credential']) {
      //   def target = ENV.SSH_USER + '@' + ENV.SSH_USER
      //   sh 'ssh -o StrictHostKeyChecking=no ' + target +' uname -a'
      //   sh 'scp -r ./docker-compose-swarm.yml ' + target + ':/home/' + ENV.SSH_USER + '/docker-compose-swarm.yml'
      //   sh 'ssh ' + target + ' docker stack deploy -c ' + '/home/' + ENV.SSH_USER + '/docker-compose-swarm.yml golang-backend'
      // }
      
      // Deploy stack
      // sh 'docker stack deploy -c docker-compose-swarm.yml golang-backend'
      
      // Deploy service
      sh 'docker service create --name golang-backend --publish published=30002,target=3000 127.0.0.1:5000/backend-golang:latest'
	  }
  } catch (e) {
      currentBuild.result = "FAILED"
  } finally {
      notifyBuild(currentBuild.result)
  }
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} <${env.BUILD_URL}|Job URL> - <${env.BUILD_URL}/console|Console Output>"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  // slackSend(color: colorCode, message: summary)
}